// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ritp.proto

package ritp;

public interface FrameOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ritp.Frame)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   * @return Whether the info field is set.
   */
  boolean hasInfo();
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   * @return The info.
   */
  Info getInfo();

  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   * @return Whether the close field is set.
   */
  boolean hasClose();
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   * @return The close.
   */
  Close getClose();

  /**
   * <pre>
   *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
   *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
   * </pre>
   *
   * <code>uint32 pull = 3;</code>
   * @return The pull.
   */
  int getPull();

  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   * @return Whether the msg field is set.
   */
  boolean hasMsg();
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   * @return The msg.
   */
  Msg getMsg();

  public Frame.TypeCase getTypeCase();
}
