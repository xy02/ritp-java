// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ritp.proto

package ritp;

/**
 * <pre>
 *数据帧，连接上的基础数据载体
 * </pre>
 *
 * Protobuf type {@code ritp.Frame}
 */
public  final class Frame extends
    com.google.protobuf.GeneratedMessageLite<
        Frame, Frame.Builder> implements
    // @@protoc_insertion_point(message_implements:ritp.Frame)
    FrameOrBuilder {
  private Frame() {
  }
  private int typeCase_ = 0;
  private Object type_;
  public enum TypeCase {
    INFO(1),
    CLOSE(2),
    PULL(3),
    MSG(4),
    TYPE_NOT_SET(0);
    private final int value;
    private TypeCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static TypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static TypeCase forNumber(int value) {
      switch (value) {
        case 1: return INFO;
        case 2: return CLOSE;
        case 3: return PULL;
        case 4: return MSG;
        case 0: return TYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @Override
  public TypeCase
  getTypeCase() {
    return TypeCase.forNumber(
        typeCase_);
  }

  private void clearType() {
    typeCase_ = 0;
    type_ = null;
  }

  public static final int INFO_FIELD_NUMBER = 1;
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   */
  @Override
  public boolean hasInfo() {
    return typeCase_ == 1;
  }
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   */
  @Override
  public Info getInfo() {
    if (typeCase_ == 1) {
       return (Info) type_;
    }
    return Info.getDefaultInstance();
  }
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   */
  private void setInfo(Info value) {
    value.getClass();
  type_ = value;
    typeCase_ = 1;
  }
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   */
  private void mergeInfo(Info value) {
    value.getClass();
  if (typeCase_ == 1 &&
        type_ != Info.getDefaultInstance()) {
      type_ = Info.newBuilder((Info) type_)
          .mergeFrom(value).buildPartial();
    } else {
      type_ = value;
    }
    typeCase_ = 1;
  }
  /**
   * <pre>
   *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
   * </pre>
   *
   * <code>.ritp.Info info = 1;</code>
   */
  private void clearInfo() {
    if (typeCase_ == 1) {
      typeCase_ = 0;
      type_ = null;
    }
  }

  public static final int CLOSE_FIELD_NUMBER = 2;
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   */
  @Override
  public boolean hasClose() {
    return typeCase_ == 2;
  }
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   */
  @Override
  public Close getClose() {
    if (typeCase_ == 2) {
       return (Close) type_;
    }
    return Close.getDefaultInstance();
  }
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   */
  private void setClose(Close value) {
    value.getClass();
  type_ = value;
    typeCase_ = 2;
  }
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   */
  private void mergeClose(Close value) {
    value.getClass();
  if (typeCase_ == 2 &&
        type_ != Close.getDefaultInstance()) {
      type_ = Close.newBuilder((Close) type_)
          .mergeFrom(value).buildPartial();
    } else {
      type_ = value;
    }
    typeCase_ = 2;
  }
  /**
   * <pre>
   *表明本端不再接收Frame消息,并关闭连接
   * </pre>
   *
   * <code>.ritp.Close close = 2;</code>
   */
  private void clearClose() {
    if (typeCase_ == 2) {
      typeCase_ = 0;
      type_ = null;
    }
  }

  public static final int PULL_FIELD_NUMBER = 3;
  /**
   * <pre>
   *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
   *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
   * </pre>
   *
   * <code>uint32 pull = 3;</code>
   * @return The pull.
   */
  @Override
  public int getPull() {
    if (typeCase_ == 3) {
      return (Integer) type_;
    }
    return 0;
  }
  /**
   * <pre>
   *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
   *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
   * </pre>
   *
   * <code>uint32 pull = 3;</code>
   * @param value The pull to set.
   */
  private void setPull(int value) {
    typeCase_ = 3;
    type_ = value;
  }
  /**
   * <pre>
   *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
   *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
   * </pre>
   *
   * <code>uint32 pull = 3;</code>
   */
  private void clearPull() {
    if (typeCase_ == 3) {
      typeCase_ = 0;
      type_ = null;
    }
  }

  public static final int MSG_FIELD_NUMBER = 4;
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   */
  @Override
  public boolean hasMsg() {
    return typeCase_ == 4;
  }
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   */
  @Override
  public Msg getMsg() {
    if (typeCase_ == 4) {
       return (Msg) type_;
    }
    return Msg.getDefaultInstance();
  }
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   */
  private void setMsg(Msg value) {
    value.getClass();
  type_ = value;
    typeCase_ = 4;
  }
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   */
  private void mergeMsg(Msg value) {
    value.getClass();
  if (typeCase_ == 4 &&
        type_ != Msg.getDefaultInstance()) {
      type_ = Msg.newBuilder((Msg) type_)
          .mergeFrom(value).buildPartial();
    } else {
      type_ = value;
    }
    typeCase_ = 4;
  }
  /**
   * <pre>
   *流消息
   * </pre>
   *
   * <code>.ritp.Msg msg = 4;</code>
   */
  private void clearMsg() {
    if (typeCase_ == 4) {
      typeCase_ = 0;
      type_ = null;
    }
  }

  public static Frame parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Frame parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Frame parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Frame parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Frame parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static Frame parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static Frame parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static Frame parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static Frame parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static Frame parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static Frame parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static Frame parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(Frame prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   *数据帧，连接上的基础数据载体
   * </pre>
   *
   * Protobuf type {@code ritp.Frame}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        Frame, Builder> implements
      // @@protoc_insertion_point(builder_implements:ritp.Frame)
      FrameOrBuilder {
    // Construct using ritp.Frame.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @Override
    public TypeCase
        getTypeCase() {
      return instance.getTypeCase();
    }

    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }


    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    @Override
    public boolean hasInfo() {
      return instance.hasInfo();
    }
    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    @Override
    public Info getInfo() {
      return instance.getInfo();
    }
    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    public Builder setInfo(Info value) {
      copyOnWrite();
      instance.setInfo(value);
      return this;
    }
    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    public Builder setInfo(
        Info.Builder builderForValue) {
      copyOnWrite();
      instance.setInfo(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    public Builder mergeInfo(Info value) {
      copyOnWrite();
      instance.mergeInfo(value);
      return this;
    }
    /**
     * <pre>
     *本端信息，两端在连接建立后首先必须相互发送且只发送一次此信息，本端在验证对端信息失败时，发送Frame.close后关闭连接
     * </pre>
     *
     * <code>.ritp.Info info = 1;</code>
     */
    public Builder clearInfo() {
      copyOnWrite();
      instance.clearInfo();
      return this;
    }

    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    @Override
    public boolean hasClose() {
      return instance.hasClose();
    }
    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    @Override
    public Close getClose() {
      return instance.getClose();
    }
    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    public Builder setClose(Close value) {
      copyOnWrite();
      instance.setClose(value);
      return this;
    }
    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    public Builder setClose(
        Close.Builder builderForValue) {
      copyOnWrite();
      instance.setClose(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    public Builder mergeClose(Close value) {
      copyOnWrite();
      instance.mergeClose(value);
      return this;
    }
    /**
     * <pre>
     *表明本端不再接收Frame消息,并关闭连接
     * </pre>
     *
     * <code>.ritp.Close close = 2;</code>
     */
    public Builder clearClose() {
      copyOnWrite();
      instance.clearClose();
      return this;
    }

    /**
     * <pre>
     *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
     *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
     * </pre>
     *
     * <code>uint32 pull = 3;</code>
     * @return The pull.
     */
    @Override
    public int getPull() {
      return instance.getPull();
    }
    /**
     * <pre>
     *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
     *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
     * </pre>
     *
     * <code>uint32 pull = 3;</code>
     * @param value The pull to set.
     * @return This builder for chaining.
     */
    public Builder setPull(int value) {
      copyOnWrite();
      instance.setPull(value);
      return this;
    }
    /**
     * <pre>
     *表示本端可以接收更多的msg的个数，等同于ReactiveStream里request(n)的意义
     *对端发送的msg总个数必须小于等于本端发送的pull的累加总和
     * </pre>
     *
     * <code>uint32 pull = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearPull() {
      copyOnWrite();
      instance.clearPull();
      return this;
    }

    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    @Override
    public boolean hasMsg() {
      return instance.hasMsg();
    }
    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    @Override
    public Msg getMsg() {
      return instance.getMsg();
    }
    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    public Builder setMsg(Msg value) {
      copyOnWrite();
      instance.setMsg(value);
      return this;
    }
    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    public Builder setMsg(
        Msg.Builder builderForValue) {
      copyOnWrite();
      instance.setMsg(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    public Builder mergeMsg(Msg value) {
      copyOnWrite();
      instance.mergeMsg(value);
      return this;
    }
    /**
     * <pre>
     *流消息
     * </pre>
     *
     * <code>.ritp.Msg msg = 4;</code>
     */
    public Builder clearMsg() {
      copyOnWrite();
      instance.clearMsg();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:ritp.Frame)
  }
  @Override
  @SuppressWarnings({"unchecked", "fallthrough"})
  protected final Object dynamicMethod(
      MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new Frame();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          Object[] objects = new Object[] {
            "type_",
            "typeCase_",
            Info.class,
            Close.class,
            Msg.class,
          };
          String info =
              "\u0000\u0004\u0001\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001<\u0000\u0002<" +
              "\u0000\u0003>\u0000\u0004<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<Frame> parser = PARSER;
        if (parser == null) {
          synchronized (Frame.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<Frame>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:ritp.Frame)
  private static final Frame DEFAULT_INSTANCE;
  static {
    Frame defaultInstance = new Frame();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Frame.class, defaultInstance);
  }

  public static Frame getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Frame> PARSER;

  public static com.google.protobuf.Parser<Frame> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

